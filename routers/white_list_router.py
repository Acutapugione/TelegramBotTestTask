from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton

from shared.enums import EUserStatus
from .command_router import show_whitelist_menu, UserState
from shared.funcs import (
    extract_domain,
    users,
    update_white_list,
    update_applications_sent,
    get_start_keyboard,
)

from shared.config import (
    active_sending,
    active_sessions,
    logger,
    active_domains,
    active_tasks,
    user_request_counter,
)


from shared.keyboards import start_keyboard

white_list_router = Router()


# –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ–º–µ–Ω—ñ–≤ –¥–æ –≤–∞–π—Ç–ª–∏—Å—Ç–∞
@white_list_router.message(lambda message: message.text == "üìå –î–æ–¥–∞—Ç–∏ –¥–æ–º–µ–Ω")
async def request_domain(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_data = users.get(user_id, {})
    user_domains = user_data.get("whitelist", [])

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if user_data.get("status") == EUserStatus.DEMO:
        return await message.answer(
            "‚ùå –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ —É –ø–ª–∞—Ç–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó –±–æ—Ç—É."
        )

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–æ—Å—è–≥ –ª—ñ–º—ñ—Ç—É –Ω–∞ 7 –¥–æ–º–µ–Ω–∏
    if (
        user_data.get("status") == EUserStatus.UNLIMITED
        and len(user_domains) >= 7
        or user_data.get("status") == EUserStatus.MAX
        and len(user_domains) >= 7
    ):
        return await message.answer(
            "‚ùå –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –±—ñ–ª—å—à–µ 7-–º–∏ –¥–æ–º–µ–Ω—ñ–≤.",
            reply_markup=get_start_keyboard(user_id),
        )

    await message.answer(
        "üì© –í—ñ–¥–ø—Ä–∞–≤—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç, –¥–æ–º–µ–Ω —è–∫–æ–≥–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏.",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥")],
            ],
            resize_keyboard=True,
            one_time_keyboard=True,
        ),
    )

    user_id = message.from_user.id

    user_state = await state.get_state()

    if (
        user_state == UserState.waiting_for_duration
        or user_state == UserState.waiting_for_frequency
    ):
        active_sessions[user_id].pop(-1)
        active_domains[user_id].pop(list(active_domains[user_id].keys())[-1])

    await state.set_state(UserState.waiting_for_domain)


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω—ñ–≤"
@white_list_router.message(lambda message: message.text == "üìÉ –°–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω—ñ–≤")
async def list_domains(message: Message, state: FSMContext, user_id=None):
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_id = user_id or message.from_user.id
    user_domains = users.get(user_id, {}).get("whitelist", [])

    user_id = message.from_user.id

    user_state = await state.get_state()

    if (
        user_state == UserState.waiting_for_duration
        or user_state == UserState.waiting_for_frequency
    ):
        active_sessions[user_id].pop(-1)
        active_domains[user_id].pop(list(active_domains[user_id].keys())[-1])

    await state.set_state(UserState.domain_list)

    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
    domain_buttons = [[KeyboardButton(text=domain)] for domain in user_domains]
    domain_buttons.append([KeyboardButton(text="‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥")])

    domain_keyboard = ReplyKeyboardMarkup(
        keyboard=domain_buttons, resize_keyboard=True, one_time_keyboard=True
    )

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –¥–æ–º–µ–Ω—ñ–≤
    if not user_domains:
        await message.answer(
            text="üìã –í–∞—à –≤–∞–π—Ç–ª–∏—Å—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π.", reply_markup=domain_keyboard
        )
    else:
        await message.answer(
            text="–í–∏–±–µ—Ä—ñ—Ç—å –¥–æ–º–µ–Ω, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏:", reply_markup=domain_keyboard
        )


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –¥–æ–º–µ–Ω –≤ –≤–∞–π—Ç–ª–∏—Å—Ç—ñ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
@white_list_router.message(
    lambda message: message.text
    in [domain for domain in users.get(message.from_user.id, {}).get("whitelist", [])]
)
async def delete_domain(message: Message, state: FSMContext):
    user_id = message.from_user.id
    domain_to_remove = message.text

    # –í–∏–¥–∞–ª—è—î–º–æ –¥–æ–º–µ–Ω –∑ –≤–∞–π—Ç–ª–∏—Å—Ç–∞
    if domain_to_remove in users[user_id].get("whitelist", []):
        users[user_id]["whitelist"].remove(domain_to_remove)

        white_list_str = ""
        for domain in users[user_id]["whitelist"]:
            white_list_str += f"{domain}, "
        update_white_list(user_id, white_list_str.strip().strip(","))

        # save_users(users)
        await message.answer(f"‚úÖ –î–æ–º–µ–Ω {domain_to_remove} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –≤–∞–π—Ç–ª–∏—Å—Ç–∞.")
    else:
        await message.answer("‚ùå –î–æ–º–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –≤–∞—à–æ–º—É –≤–∞–π—Ç–ª–∏—Å—Ç—ñ.")

    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ —Å–ø–∏—Å–∫—É –¥–æ–º–µ–Ω—ñ–≤
    await list_domains(message, state)


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–¥–∞—Ç–∏ –¥–æ–º–µ–Ω"
@white_list_router.message(UserState.waiting_for_domain)
async def add_domain(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_domain = message.text

    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–æ–º–µ–Ω –∑ URL
    domain = extract_domain(user_domain)
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –¥–æ–¥–∞–≤ –¥–æ–º–µ–Ω {domain} –¥–æ –≤–∞–π—Ç–ª–∏—Å—Ç–∞")
    # –î–æ–¥–∞—î–º–æ –¥–æ–º–µ–Ω –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    users[user_id]["whitelist"] = users[user_id].get("whitelist", [])
    if domain not in users[user_id]["whitelist"]:
        users[user_id]["whitelist"].append(domain)

        white_list_str = ""
        for url in users[user_id]["whitelist"]:
            white_list_str += f"{url}, "
        update_white_list(user_id, white_list_str.strip().strip(","))

        # save_users(users)  # –ó–±–µ—Ä–µ–≥—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        await message.answer(f"‚úÖ –î–æ–º–µ–Ω {domain} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –≤–∞–π—Ç–ª–∏—Å—Ç–∞.")
        # –ó—É–ø–∏–Ω–∫–∞ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å —ñ–∑ –≤–∫–∞–∑–∞–Ω–∏–º –¥–æ–º–µ–Ω–æ–º
        logger.info(active_domains.items())
        for (
            user_id,
            url,
        ) in [
            (
                user_id,
                url,
            )
            for user_id, domain_url in active_domains.items()
            for domain_item, url in domain_url.items()
            if domain_item == domain
        ]:
            logger.info(
                f"–ê–∫—Ç–∏–≤–Ω–∞ —Å–µ—Å—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} —ñ–∑ –¥–æ–º–µ–Ω–æ–º {domain} –∑ –≤–∞–π—Ç–ª–∏—Å—Ç–∞ –≤–∏–ª—É—á–µ–Ω–∞"
            )

            active_sessions[user_id].remove(url)
            task = active_tasks[user_id].pop(url)
            logger.info(f"–ê–∫—Ç–∏–≤–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –≤—ñ–¥–º—ñ–Ω–µ–Ω–æ")
            task.cancel()
            logger.info(f"{active_sessions[user_id]=}")

            count_requests = user_request_counter[user_id].pop(url)
            update_applications_sent(
                user_id, users[user_id]["applications_sent"] + count_requests
            )
            users[user_id]["applications_sent"] += count_requests
            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –ø—Ä–æ –∑—É–ø–∏–Ω–∫—É –∑–∞–≤–¥–∞–Ω–Ω—è
            logger.info(
                f"–ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–æ–∫. –í—Å—å–æ–≥–æ {count_requests}"
            )

            await message.bot.send_message(
                chat_id=user_id,
                text=f"‚ùå –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ {active_domains[user_id][domain]} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —á–µ—Ä–µ–∑ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ–º–µ–Ω—É —É –≤–∞–π—Ç-–ª–∏—Å—Ç.\n"
                f"‚úâÔ∏è –í—Å—å–æ–≥–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞—è–≤–æ–∫: {count_requests}",
                reply_markup=get_start_keyboard(user_id),
            )
            active_domains[user_id].pop(domain)
        # for u_id in active_domains.keys():
        #     if domain in active_domains[u_id].keys():

        #         await state.set_state(UserState.waiting_for_start)
        #         active_sending[u_id] = False
        #         for task in active_tasks.get(u_id, {}).values():
        #             task.cancel()

        #         task = active_tasks.pop(u_id, None)
        #         active_sessions.pop(u_id, None)
        #         total_requests = 0
        #         for count_requests in user_request_counter.get(u_id, {}).values():
        #             total_requests += count_requests
        #         user_request_counter.pop(u_id, None)

        #         # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–∞—è–≤–æ–∫
        #         if u_id in users:
        #             update_applications_sent(
        #                 u_id, users[u_id]["applications_sent"] + total_requests
        #             )
        #             users[u_id]["applications_sent"] += total_requests

        #         await message.bot.send_message(
        #             chat_id=u_id,
        #             text=f"‚ùå –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ {active_domains[u_id][domain]} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —á–µ—Ä–µ–∑ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ–º–µ–Ω—É —É –≤–∞–π—Ç-–ª–∏—Å—Ç.\n"
        #             f"‚úâÔ∏è –í—Å—å–æ–≥–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞—è–≤–æ–∫: {total_requests}",
        #             reply_markup=get_start_keyboard(u_id),
        #         )

        #         active_domains[u_id].pop(domain)
    else:
        await message.answer("‚ùå –¶–µ–π –¥–æ–º–µ–Ω –≤–∂–µ –¥–æ–¥–∞–Ω–æ –¥–æ –≤–∞–π—Ç–ª–∏—Å—Ç–∞.")

    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –º–µ–Ω—é –≤–∞–π—Ç–ª–∏—Å—Ç–∞
    await show_whitelist_menu(message, state)
